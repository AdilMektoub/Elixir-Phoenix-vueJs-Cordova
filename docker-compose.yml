version: '3.6'
services:

###########################  VUEJS  #########################
  vuejs:
    build:
      context: ./client/
    ports:
      - '8080:80'
    depends_on:
      - phoenix
    container_name: vuejs
    networks:
      - frontback

##########################  DB #############################
  db:
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_HOST_AUTH_METHOD: trust
    image: 'postgres:11-alpine'
    restart: always
    volumes:
      - 'pgdata:/var/lib/postgresql/data'
    container_name: db
    networks:
      - backdb

###########################  PHOENIX  #########################
  phoenix:
    build: ./server
    depends_on:
      - db
    networks:
      - frontback
      - backdb
    container_name: phoenix
    environment:
      # Variables to connect to our Postgres server
      PGUSER: postgres
      PGPASSWORD: postgres
      PGDATABASE: database_name
      PGPORT: 5432
      # Hostname of our Postgres container
      PGHOST: db
      MIX_ENV: dev
    env_file:
      - ./server/.env
    ports:
      - '4000:4000'
    # volume stocker les anciennes dépendances!!!
###########################  PROMETHEUS  #########################
#Ce que j'aimerais c'est utiliser ce service à la place de l'ip car l'ip change tout le temps sur docker ! PROMETHEUS.YML
  prometheus:
    image: quay.io/prometheus/prometheus:v2.1.0
    container_name: prometheus
    volumes:
     - ./assets/etc/prometheus/:/etc/prometheus/
     - ./assets/data/prometheus/:/prometheus/
    command: "--config.file=/etc/prometheus/prometheus.yml --storage.tsdb.path=/prometheus"
    ports:
     - 9090:9090

###########################  GRAFANA  #########################
  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
     - 82:3000
    volumes:
      - ./assets/data/grafana/:/var/lib/grafana
      - ./assets/etc/grafana/:/etc/grafana/provisioning/
    depends_on:
      - prometheus


###########################  volume/networks  #########################
volumes:
  pgdata:

networks:
  backdb:
    driver: bridge
  frontback:
    driver: bridge